#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Author: Luca Gioacchini

"""
HoneypotParser is a class for parsing log files generated by honeypots and 
extracting relevant information. It provides methods for loading log files, 
extracting labels from the log entries, and saving the extracted labels to a 
file. Subclasses can be created to implement specific logic for extracting 
labels from different types of honeypots.
"""

class HoneypotParser:
    def __init__(self, filepath, outpath=None):
        """
        A class for parsing honeypot log files and extracting relevant 
        information.

        Parameters
        ----------
        filepath : str
            The file path of the log file to be parsed.
        outpath : str, optional
            The file path to save the extracted labels to. If not provided, 
            labels will not be saved to a file.

        Attributes
        ----------
        outpath : str
            The file path to save the extracted labels to.
        logs : list
            A list of log entries as dictionaries.

        Methods
        -------
        load_log_file(filepath)
            Load the log file and return a list of log entries as dictionaries.
        extract_labels()
            Extract relevant labels from the log entries.
        save_labels(labels)
            Save the extracted labels to a file.

        """
        self.outpath = outpath
        self.logs = self.load_log_file(filepath)

    def load_log_file(self, filepath):
        """
        Load the log file and return a list of log entries as dictionaries.

        Parameters
        ----------
        filepath : str
            The file path of the log file to be loaded.

        Returns
        -------
        list
            A list of log entries as dictionaries.

        """
        raise NotImplementedError(
            "This method must be implemented in a subclass.")

    def extract_labels(self):
        """
        Extract relevant labels from the log entries.

        Returns
        -------
        list
            A list of tuples, where each tuple contains the extracted labels 
            for a single log entry.

        """
        # Extract label1 using rules from considered honeypot
        # extracted_labels1 = self._extract_label1(label1)
        
        # Extract label2 using rules from considered honeypot
        # extracted_labels2 = self._extract_label2(label2)
        
        # ...
        
        raise NotImplementedError(
            "This method must be implemented in a subclass.")

    def save_labels(self, labels):
        """
        Save the extracted labels to a file.

        Parameters
        ----------
        labels : list
            A list of tuples, where each tuple contains the extracted labels 
            for a single log entry.

        """
        # Set the header row of the output file
        header = 'src_ip,label1,label2,label3'
        
        # Convert the list of tuples to a list of strings
        to_file = [','.join(x) for x in labels]
        
        # Join the header and the list of strings with newline characters
        to_file = '\n'.join([header]+to_file)
        
        # Open the output file in write mode and write the data to it
        with open(self.outpath, 'w') as file:
            file.write(to_file)